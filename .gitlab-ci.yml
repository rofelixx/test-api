.deploy-common: &deploy-common
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -q -y && apt-get install openssh-client -q -y )'
    - eval $(ssh-agent -s)
    - echo "$GLR_PRIV_SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - SSH_OPTIONS="-o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=120s"
    - ssh $SSH_OPTIONS root@$HOST "docker login -u "$CI_REGISTRY_USER" -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
  tags:
    - segfy-bash

.integration-rules: &integration-rules
  rules:
  - if: $CI_COMMIT_BRANCH == "qa"

# -------------------------------------

stages:
  - unit-test
  - integration-prepare
  - integration-test
  - integration-cleanup
  - publish
  - deploy

variables:
  PROJECT_NAME: 'Segfy.Schedule'
  BUILD_IMAGE: 'registry.gitlab.com/segfy/docker_images/build_dotnet/dotnet5:4.0.3'

# -------------------------------------

unit-test:
  stage: unit-test
  image: $BUILD_IMAGE
  coverage: /Total[^|]*\|[^|]*\s+([\d\.]+)/
  script:
    - cd tests/$PROJECT_NAME.Tests
    - dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura
  artifacts:
    reports:
      cobertura: ./tests/$PROJECT_NAME.Tests/coverage.cobertura.xml
  tags:
    - segfy

integration:prepare:
  stage: integration-prepare
  <<: *integration-rules
  script:
    - docker-compose -f ./tests/docker-compose.test.yml up --force-recreate --build -d
  tags:
    - segfy-bash

integration:test:
  stage: integration-test
  <<: *integration-rules
  image: $BUILD_IMAGE
  script:
    - export TEST_DYNAMODB_URL=http://10.10.0.211:8000
    - cd tests/$PROJECT_NAME.Tests.Integration
    - dotnet test    
  needs:
    - job: integration:prepare
  tags:
    - segfy

integration:cleanup:
  stage: integration-cleanup
  <<: *integration-rules
  script:
    - docker-compose -f ./tests/docker-compose.test.yml down --remove-orphans --rmi all
  needs:
    - job: integration:test
  tags:
    - segfy-bash

# -------------------------------------

docker-build:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build -f "./src/$PROJECT_NAME/Dockerfile" --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_COMMIT_BRANCH == "qa"
    - if: $CI_COMMIT_TAG != null
  tags:
    - segfy

# -------------------------------------

deploy-dev:
  <<: *deploy-common
  script:
    - ssh $SSH_OPTIONS root@$HOST "docker pull $CI_REGISTRY_IMAGE:dev"
    - ssh $SSH_OPTIONS root@$HOST "docker rm -f schedule-api-dev"
    - ssh $SSH_OPTIONS root@$HOST "docker run -d --restart always -p 5050:5050 --name schedule-api-dev $CI_REGISTRY_IMAGE:dev"
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  environment:
    name: $CI_COMMIT_BRANCH    

deploy-qa:
  <<: *deploy-common
  script:
    - ssh $SSH_OPTIONS root@$HOST "docker pull $CI_REGISTRY_IMAGE:qa"
    - ssh $SSH_OPTIONS root@$HOST "docker rm -f schedule-api-qa"
    - ssh $SSH_OPTIONS root@$HOST "docker run -d --restart always -p 5050:5050 --name schedule-api-qa $CI_REGISTRY_IMAGE:qa"
  rules:
    - if: $CI_COMMIT_BRANCH == "qa"
  environment:
    name: $CI_COMMIT_BRANCH    

deploy-prod:
  <<: *deploy-common
  script:    
    - ssh $SSH_OPTIONS root@$HOST "docker pull $CI_REGISTRY_IMAGE:latest"  
    - ssh $SSH_OPTIONS root@$HOST "docker run -d --restart always -p 5050:5050 --name schedule-api-prod $CI_REGISTRY_IMAGE:latest"
  rules:
    - if: $CI_COMMIT_TAG != null
  environment:
    name: "prod"
